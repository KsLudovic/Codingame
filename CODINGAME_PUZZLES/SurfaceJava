import java.util.*;

class Solution {

    public static class coor {
        int x;
        int y;

		public coor(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int L = in.nextInt();
        int H = in.nextInt();

        char[][] board = new char[H][L];

        if (in.hasNextLine()) {
            in.nextLine();
        }

        for (int i = 0; i < H; i++) {
            board[i] = in.nextLine().toCharArray();
        }

        int N = in.nextInt();

        for (int i = 0; i < N; i++) {
            int X = in.nextInt();
            int Y = in.nextInt();
            
            boolean[][] visited = new boolean[H][L];
            Stack<coor> myStack = new Stack<coor>();

            myStack.push(new coor(X,Y));

            System.out.println(floodFill(board, visited, myStack, 'O'));
        }
    }
    
    public static int floodFill(char[][] board, boolean[][] visited, Stack<coor> myStack, char what) {

        int result = 0;

        while (myStack.size() > 0) {

            coor c = myStack.pop();

            if (board[c.y][c.x] != what || visited[c.y][c.x]) continue;
            
            visited[c.y][c.x] = true;
            
            result++;
            if (c.y+1 < board.length && !visited[c.y+1][c.x]) myStack.push(new coor(c.x, c.y+1));
            if (c.y-1 >= 0 && !visited[c.y-1][c.x]) myStack.push(new coor(c.x, c.y-1));
            if (c.x+1 < board[0].length && !visited[c.y][c.x+1]) myStack.push(new coor(c.x+1, c.y));
            if (c.x-1 >= 0 && !visited[c.y][c.x-1]) myStack.push(new coor(c.x-1, c.y));
        }
        return result;        
    } 
}
